SELECT 	*
FROM 	EMPLOYEES e 
;
-------------------------------------------- 인터페이스 구현 서술형

-- 문제1
CREATE TABLE EMPLOYEES_NEW AS SELECT * FROM EMPLOYEES e ;

SELECT 	*
FROM 	EMPLOYEES_NEW
;

-- 문제2
CREATE TABLE DEPARTMENTS_NEW AS SELECT * FROM DEPARTMENTS d  ;

SELECT 	*
FROM 	DEPARTMENTS_NEW
;

-- 문제3
ALTER TABLE EMPLOYEES_NEW ADD USER_NAME VARCHAR(25);

-- 문제4
ALTER TABLE EMPLOYEES_NEW ADD CONSTRAINTS EMID_PK  PRIMARY KEY (EMPLOYEE_ID);

-- 문제5
ALTER TABLE DEPARTMENTS_NEW ADD CONSTRAINTS DPID_PK  PRIMARY KEY (DEPARTMENT_ID);

-------------------------------------------- 인터페이스 구현 평가자체크리스트

-- 문제6
ALTER TABLE EMPLOYEES_NEW
ADD CONSTRAINTS DPID_FK
FOREIGN KEY (DEPARTMENT_ID)
REFERENCES DEPARTMENTS_NEW(DEPARTMENT_ID)
;

-- 문제7
SELECT 	en.EMPLOYEE_ID, en.FIRST_NAME , dn.DEPARTMENT_ID, dn.DEPARTMENT_NAME
FROM 	EMPLOYEES_NEW en
LEFT OUTER JOIN DEPARTMENTS_NEW dn ON en.DEPARTMENT_ID = dn.DEPARTMENT_ID
WHERE 	dn.DEPARTMENT_ID = 60
ORDER BY en.EMPLOYEE_ID
;

-- 문제8
SELECT 	DEPARTMENT_ID, ROUND(AVG(SALARY))
FROM 	EMPLOYEES_NEW en
GROUP BY DEPARTMENT_ID
HAVING 	DEPARTMENT_ID = 100
;

-- 문제9
DROP TABLE EMPLOYEES_NEW;

-- 문제10
DROP TABLE DEPARTMENTS_NEW;

-- 문제11
SELECT 	e.FIRST_NAME , e.SALARY , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE 	d.DEPARTMENT_NAME = 'Sales'
AND 	SALARY < (SELECT ROUND(AVG(SALARY)) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 100)
;

-- 문제12
SELECT 	e.FIRST_NAME , e.JOB_ID , d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE 	COMMISSION_PCT IS NOT NULL 
;

-- 문제13
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME , e.JOB_ID , e.SALARY 
FROM 	EMPLOYEES e 
WHERE 	JOB_ID = (SELECT JOB_ID FROM EMPLOYEES e2 WHERE EMPLOYEE_ID = 123)
AND 	SALARY > (SELECT SALARY FROM EMPLOYEES e3 WHERE EMPLOYEE_ID = 192)
;

-- 문제14
CREATE TABLE STUDENT(
	STD_ID			NUMBER(3) PRIMARY KEY, 
	STD_NAME		VARCHAR(10) NOT NULL,
	STD_PHONENUM	NUMBER(11) NOT NULL,
	STD_ADDRESS		VARCHAR(100),
	SUBJECT			NUMBER(1));

-- 문제15
CREATE UNIQUE INDEX idx_STUDENT
ON	STUDENT(STD_NAME)
;

-- 문제16
INSERT INTO STUDENT VALUES (1, '한놈', 01011111111, '서울시 역삼1동', '1');
INSERT INTO STUDENT VALUES (2, '두시기', 01011111112, '서울시 역삼2동', '2');
INSERT INTO STUDENT VALUES (3, '석삼', 01011111113, '서울시 역삼3동', '3');
INSERT INTO STUDENT VALUES (4, '너구리', 01011111114, '서울시 역삼4동', '4');
INSERT INTO STUDENT VALUES (5, '오징어', 01011111115, '서울시 역삼5동', '5');
INSERT INTO STUDENT VALUES (6, '육개장', 01011111116, '서울시 역삼6동', '6');
INSERT INTO STUDENT VALUES (7, '칠면조', 01011111117, '서울시 역삼7동', '7');
INSERT INTO STUDENT VALUES (8, '팔보채', 01011111118, '서울시 역삼8동', '8');
INSERT INTO STUDENT VALUES (9, '구공탄', 01011111119, '서울시 역삼9동', '9');
INSERT INTO STUDENT VALUES (10, '십자가', 01011111100, '서울시 역삼10동', '6');

-- 문제17
DROP INDEX idx_STUDENT;















